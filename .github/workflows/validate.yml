name: Validate Dockerfile
on:
  pull_request:
    paths:
      - '.github/workflows/docker_hub.yml'
      - '.github/workflows/validate.yml'
      - '**/Dockerfile'
      - '.github/matrix.json'
concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true
env:
  DOCKER_USER: 41772ki
  DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
  DOCKER_REPO: swift-mint
jobs:
  generate-matrix:
    name: Generate matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: |
          matrix=$(cat .github/matrix.json | jq -c .)
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: 
        swift_version: ${{ fromJson(needs.generate-matrix.outputs.matrix).swift_version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set Mint version
        id: set-mint-version
        run: |
          mint_revision=$(echo '${{ needs.generate-matrix.outputs.matrix }}' | jq -c '.mint_revision' | jq -r '.["${{ matrix.swift_version }}"] // "master"')
          echo "mint-revision=$mint_revision" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          push: false
          load: true
          tags: ${{ env.DOCKER_USER }}/${{ env.DOCKER_REPO }}:${{ matrix.swift_version }}-${{ steps.set-mint-version.outputs.mint-revision }}
          build-args: |
            SWIFT_VERSION=${{ matrix.swift_version }}
            MINT_REVISION=${{ steps.set-mint-version.outputs.mint-revision }}
      - name: Export versions
        id: export-versions
        run: |
          IMAGE_ID="$(echo ${{ steps.build-image.outputs.imageid }} | sed -r 's/:/ /g' | awk '{ print $NF }')"
          SWIFT_VERSION="$(echo "$(docker run "${IMAGE_ID}" swift --version)" | tr '\r\n' ',' | sed -e 's/,,/,/g' | sed -e 's/,$//g' | sed -e 's/,/<br>/g')"
          MINT_VERSION="$(echo "$(docker run "${IMAGE_ID}" mint version)" | tr '\r\n' ',' | sed -e 's/,,/,/g' | sed -e 's/,$//g' | sed -e 's/,/<br>/g')"
          MINT_REVISION="$(echo "$(docker run "${IMAGE_ID}" cat /.mint_revision)" | tr '\r\n' ',' | sed -e 's/,,/,/g' | sed -e 's/,$//g' | sed -e 's/,/<br>/g')"
          NPM_VERSION="$(echo "$(docker run "${IMAGE_ID}" cat /.npm_version)" | tr '\r\n' ',' | sed -e 's/,,/,/g' | sed -e 's/,$//g' | sed -e 's/,/<br>/g')"
          cat <<EOF > versions_table.txt
          | Tool  | Version description |
          | ----- | ------------------- |
          | Swift | ${SWIFT_VERSION} |
          | Mint  | ${MINT_VERSION}<br>${MINT_REVISION} |
          | npm   | ${NPM_VERSION} |
          EOF
      - uses: actions/upload-artifact@v4
        with:
          name: swift-${{ matrix.swift_version }}
          path: versions_table.txt
          if-no-files-found: error
          retention-days: 1
  validate:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v5
        with:
          path: descriptions
          pattern: swift-*
      - name: Validate PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for SWIFT_VERSION in $(cd descriptions && find ./* -type d -exec basename {} \;); do
            echo "## ${SWIFT_VERSION}" >> result.md
            echo '' >> result.md
            cat descriptions/${SWIFT_VERSION}/versions_table.txt >> result.md
            echo '' >> result.md
          done
          gh pr review -a -F result.md "${{ github.event.pull_request.html_url }}"
